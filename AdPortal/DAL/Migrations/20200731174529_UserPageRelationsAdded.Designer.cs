// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200731174529_UserPageRelationsAdded")]
    partial class UserPageRelationsAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Models.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DefectsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DoorsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Engine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FrameTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FuelTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ManufactureDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ManufacturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ManufacturerModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Seats")
                        .HasColumnType("int");

                    b.Property<Guid?>("SteeringWheelPosId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TransmissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("VehicleInspection")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ColorId");

                    b.HasIndex("DefectsId");

                    b.HasIndex("DoorsId");

                    b.HasIndex("FrameTypeId");

                    b.HasIndex("FuelTypeId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("ManufacturerModelId");

                    b.HasIndex("SteeringWheelPosId");

                    b.HasIndex("TransmissionId");

                    b.HasIndex("UserId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4d7a9ed6-e416-43f9-a7cc-1aa60564782c"),
                            Name = "Automobilis"
                        },
                        new
                        {
                            Id = new Guid("9150fdef-12d1-4754-8df7-4d2086aa0778"),
                            Name = "Motociklas"
                        });
                });

            modelBuilder.Entity("Domain.Models.Color", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("262716c3-570c-4d8e-bf9f-aa7a538fb7cc"),
                            Name = "Balta"
                        },
                        new
                        {
                            Id = new Guid("c669a814-e508-4920-88f3-dcdcbfc7fd84"),
                            Name = "Juoda"
                        });
                });

            modelBuilder.Entity("Domain.Models.Condition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VehicCondition")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Conditions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f6b33440-fa6f-458a-94d6-59737953be86"),
                            VehicCondition = "Naudota"
                        },
                        new
                        {
                            Id = new Guid("f3235042-65b6-48bc-958b-c04d955bdbdb"),
                            VehicCondition = "Nauja"
                        });
                });

            modelBuilder.Entity("Domain.Models.Cooling", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CoolingType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Coolings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4ec6d4a5-6a29-43e2-b160-1b32a0d6ee93"),
                            CoolingType = "Oru"
                        },
                        new
                        {
                            Id = new Guid("5145d471-31e8-44b8-9ae4-c32d1826c64b"),
                            CoolingType = "Vandeniu"
                        });
                });

            modelBuilder.Entity("Domain.Models.Defects", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Defect")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Defects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5ccbd8dd-3ca2-42aa-9e80-3e3bc4d09414"),
                            Defect = "Be defetkų"
                        },
                        new
                        {
                            Id = new Guid("147ef79f-dd86-42de-ab28-69258ebe5f29"),
                            Defect = "Degęs"
                        });
                });

            modelBuilder.Entity("Domain.Models.Diameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TireDiameter")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Diameters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6c772385-bab9-4b4d-9902-d99a1ed7097f"),
                            TireDiameter = 17m
                        },
                        new
                        {
                            Id = new Guid("4bedc2e1-3c49-4950-8698-2bf2f1181607"),
                            TireDiameter = 18m
                        });
                });

            modelBuilder.Entity("Domain.Models.Doors", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DoorCount")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Doors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bb4dce6a-d113-455f-8e85-6707dfc0f842"),
                            DoorCount = "4/5"
                        },
                        new
                        {
                            Id = new Guid("e141847d-24b8-4129-a1ad-23524813e769"),
                            DoorCount = "2/3"
                        });
                });

            modelBuilder.Entity("Domain.Models.FrameType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FrameTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("36139097-f98f-4bae-b4ab-5a2bbcddf633"),
                            Type = "Universalas"
                        },
                        new
                        {
                            Id = new Guid("d4bb2439-94bb-46cf-9bca-526d555e0de4"),
                            Type = "Sedanas"
                        });
                });

            modelBuilder.Entity("Domain.Models.FuelType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FuelTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f96de24-f0ad-4612-aa6c-3e644117987c"),
                            Type = "Benzinas"
                        },
                        new
                        {
                            Id = new Guid("f703c4dd-0844-4212-8b6d-ecf6274d9bd9"),
                            Type = "Dyzelinas"
                        });
                });

            modelBuilder.Entity("Domain.Models.Height", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TireHeight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Heights");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0a9e1b42-b528-4293-a3e0-5a8b55ef7f82"),
                            TireHeight = 205m
                        },
                        new
                        {
                            Id = new Guid("1bda2beb-86d4-415d-b6c3-8afd8565cecb"),
                            TireHeight = 215m
                        });
                });

            modelBuilder.Entity("Domain.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bytes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CarsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CarsId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Domain.Models.Manufacturer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("Domain.Models.ManufacturerModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ManufacturerModels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("50438d50-964a-43c7-ab7f-a78c37bd5122"),
                            Name = "RS6"
                        },
                        new
                        {
                            Id = new Guid("9b75fde8-122e-4057-bf1b-d05b3a1533e6"),
                            Name = "E60"
                        });
                });

            modelBuilder.Entity("Domain.Models.Motorbike", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ConditionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CoolingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DefectsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EngineCapacity")
                        .HasColumnType("int");

                    b.Property<Guid?>("FuelTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ManufactureDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ManufacturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Power")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Registration")
                        .HasColumnType("bit");

                    b.Property<decimal>("TireWearOut")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VehicleTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ConditionId");

                    b.HasIndex("CoolingId");

                    b.HasIndex("DefectsId");

                    b.HasIndex("FuelTypeId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Motorbikes");
                });

            modelBuilder.Entity("Domain.Models.Season", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SeasonName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("Domain.Models.SteeringWheelPos", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SteeringWheelPos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d17968d7-8b22-42b6-a3aa-f3dd7bce44ea"),
                            Position = "Kairė"
                        },
                        new
                        {
                            Id = new Guid("a282628a-5d25-4260-8601-365865031cb6"),
                            Position = "Dešinė"
                        });
                });

            modelBuilder.Entity("Domain.Models.Tire", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ConditionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DiameterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HeightId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ManufactureDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ManufacturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("SeasonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TirePurposeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TireWearOut")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WidthId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ConditionId");

                    b.HasIndex("DiameterId");

                    b.HasIndex("HeightId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TirePurposeId");

                    b.HasIndex("UserId");

                    b.HasIndex("WidthId");

                    b.ToTable("Tires");
                });

            modelBuilder.Entity("Domain.Models.TirePurpose", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TirePurposes");
                });

            modelBuilder.Entity("Domain.Models.Transmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Transmissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ef273948-9993-40cf-8e17-f4ac6cbd6daf"),
                            Type = "Automatinė"
                        },
                        new
                        {
                            Id = new Guid("70dc2658-2267-45eb-9a6e-68205175ac9e"),
                            Type = "Mechaninė"
                        });
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Models.VehicleType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VehicleTypes");
                });

            modelBuilder.Entity("Domain.Models.Width", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TireWidth")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Widths");
                });

            modelBuilder.Entity("Domain.Models.Car", b =>
                {
                    b.HasOne("Domain.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("Domain.Models.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId");

                    b.HasOne("Domain.Models.Defects", "Defects")
                        .WithMany()
                        .HasForeignKey("DefectsId");

                    b.HasOne("Domain.Models.Doors", "Doors")
                        .WithMany()
                        .HasForeignKey("DoorsId");

                    b.HasOne("Domain.Models.FrameType", "FrameType")
                        .WithMany()
                        .HasForeignKey("FrameTypeId");

                    b.HasOne("Domain.Models.FuelType", "FuelType")
                        .WithMany()
                        .HasForeignKey("FuelTypeId");

                    b.HasOne("Domain.Models.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("Domain.Models.ManufacturerModel", "ManufacturerModel")
                        .WithMany()
                        .HasForeignKey("ManufacturerModelId");

                    b.HasOne("Domain.Models.SteeringWheelPos", "SteeringWheelPos")
                        .WithMany()
                        .HasForeignKey("SteeringWheelPosId");

                    b.HasOne("Domain.Models.Transmission", "Transmission")
                        .WithMany()
                        .HasForeignKey("TransmissionId");

                    b.HasOne("Domain.Models.User", null)
                        .WithMany("Cars")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Domain.Models.Image", b =>
                {
                    b.HasOne("Domain.Models.Car", "Cars")
                        .WithMany("Image")
                        .HasForeignKey("CarsId");
                });

            modelBuilder.Entity("Domain.Models.Motorbike", b =>
                {
                    b.HasOne("Domain.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("Domain.Models.Condition", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionId");

                    b.HasOne("Domain.Models.Cooling", "Cooling")
                        .WithMany()
                        .HasForeignKey("CoolingId");

                    b.HasOne("Domain.Models.Defects", "Defects")
                        .WithMany()
                        .HasForeignKey("DefectsId");

                    b.HasOne("Domain.Models.FuelType", "FuelType")
                        .WithMany()
                        .HasForeignKey("FuelTypeId");

                    b.HasOne("Domain.Models.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("Domain.Models.User", null)
                        .WithMany("Motorbikes")
                        .HasForeignKey("UserId");

                    b.HasOne("Domain.Models.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId");
                });

            modelBuilder.Entity("Domain.Models.Tire", b =>
                {
                    b.HasOne("Domain.Models.Condition", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionId");

                    b.HasOne("Domain.Models.Diameter", "Diameter")
                        .WithMany()
                        .HasForeignKey("DiameterId");

                    b.HasOne("Domain.Models.Height", "Height")
                        .WithMany()
                        .HasForeignKey("HeightId");

                    b.HasOne("Domain.Models.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("Domain.Models.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId");

                    b.HasOne("Domain.Models.TirePurpose", "TirePurpose")
                        .WithMany()
                        .HasForeignKey("TirePurposeId");

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("Tires")
                        .HasForeignKey("UserId");

                    b.HasOne("Domain.Models.Width", "Width")
                        .WithMany()
                        .HasForeignKey("WidthId");
                });
#pragma warning restore 612, 618
        }
    }
}
